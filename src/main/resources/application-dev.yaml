spring:
    config:
        # The 'configserver:' is used to tell the application to look for the configurations in the Config Server.
        # The 'optional' prefix is used to tell the application that if the Config Server is not available, it should use the configurations in this application.yaml file (need to uncomment them).
        # import:  'optional:configserver:'
        import:  'configserver:'
    cloud:
        config:
            discovery:
                # The serviceId is the name of the service in the Eureka Server.
                serviceId: dl-config-server
            # The username and password are used to access the Config Server (basic authentication) as it is now using Spring Security.
            username: admin
            password: 'admin'


# ================================================================================================================================
# All configurations below are commented as I am using the configs from the dl-config-server-repo (Global Config Pattern).
# These were the initial configurations before I started using the dl-config-server-repo.
# ================================================================================================================================
#server:
#    port: 8087
#    servlet:
#        context-path: '/dl-authuser/' # This is the context path for the service. Used in conjunction with the API Gateway that has it mapped in the routes.
#
#spring:
#    application:
#        name: dl-authuser-service
#    datasource:
#        url: jdbc:postgresql://localhost:5432/dl-authuser-v2
#        username: postgres
#        password: root
#    jpa:
#        hibernate:
#            ddl-auto: update
#            dialect: org.hibernate.dialect.PostgreSQLDialect
#            jdbc:
#                lob.non_contextual_creation: true
##        show-sql: true
##        properties:
##            hibernate:
##                format_sql: true
##                show_sql: true
#    rabbitmq:
#        addresses: amqps://dsvvfanu:4FhHf07AACm8Gv1-SoWH337wGN6zGi1P@possum.lmq.cloudamqp.com/dsvvfanu
#
## Defining the logging level for the application
#logging:
#    level:
#        com.xpto.distancelearning: TRACE
#        root: INFO
#        org.springframework.web: DEBUG
#        org.hibernate: INFO
#
#dl:
#    api:
#        url:
##            course: 'http://localhost:8082' # I do not to hardcode the URL anymore and instead use the service name defined in the Eureka.
##            'dl-course-service' is the name of the service defined in spring.application.name in the application.yaml file of the dl-course-service.
#            course: 'http://dl-course-service/dl-course'
#    broker:
#        exchange:
#            userEvent: 'dl-userevent'
#
#eureka:
#    client:
#        service-url:
#            defaultZone: 'http://localhost:8761/eureka'
#    instance:
#        hostname: localhost
#
## Configuring the Circuit Breaker with Resilience4j (globally) for the service.
#resilience4j:
#    circuitbreaker:
#        instances:
#          circuitBreakerInstance:
#            slidingWindowSize: 30
#            permittedNumberOfCallsInHalfOpenState: 2
#            slidingWindowType: TIME_BASED
#            minimumNumberOfCalls: 2
#            waitDurationInOpenState: 30s
#            failureRateThreshold: 80
#    retry:
#        instances:
#            retryInstance:
#                maxAttempts: 3
#                waitDuration: 5s
